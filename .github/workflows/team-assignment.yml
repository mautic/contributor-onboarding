name: Team Leader Round-Robin Assignment

on:
  issues:
    types: [opened, labeled]

permissions:
  issues: write
  actions: write  # This permission is needed to manage variables

jobs:
  assign-team-leader:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.labels.*.name, 'community-team') || 
      contains(github.event.issue.labels.*.name, 'education-team') || 
      contains(github.event.issue.labels.*.name, 'marketing-team') || 
      contains(github.event.issue.labels.*.name, 'product-team')
    steps:
      - name: Assign team leader
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            if (!issue) return;
            
            // Define team leaders
            const teamLeaders = {
              'community-team': ['EkkeGuembel', 'RCheesley'],
              'education-team': ['Favour-Chibueze', 'Fakela'],
              'marketing-team': ['SDoering', 'RCheesley'],
              'product-team': ['Jos0405', 'shinde-rahul']
            };
            
            // Get all label names
            const labelNames = issue.labels.map(label => label.name.toLowerCase());
            
            // Find first matching team
            const matchingTeam = Object.keys(teamLeaders).find(team => labelNames.includes(team));
            
            if (matchingTeam) {
              const leaders = teamLeaders[matchingTeam];
              const varName = `LAST_ASSIGNED_${matchingTeam.replace(/-/g, '_').toUpperCase()}`;
              
              // Get the current index from a variable
              let currentIndex = 0;
              let variableExists = false;
              
              try {
                const { data } = await github.rest.actions.getRepoVariable({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: varName
                });
                currentIndex = parseInt(data.value) || 0;
                variableExists = true;
                console.log(`Found existing variable ${varName} with value ${currentIndex}`);
              } catch (error) {
                console.log(`Variable ${varName} not found, will create it`);
              }
              
              // Calculate next index
              const nextIndex = (currentIndex + 1) % leaders.length;
              
              // Assign the leader
              const assignee = leaders[nextIndex];
              
              try {
                await github.rest.issues.addAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  assignees: [assignee]
                });
                console.log(`Assigned issue #${issue.number} to ${assignee} for team ${matchingTeam}`);
                
                // Update or create the variable for next time
                try {
                  if (variableExists) {
                    await github.rest.actions.updateRepositoryVariable({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      name: varName,
                      value: nextIndex.toString()
                    });
                    console.log(`Updated variable ${varName} to ${nextIndex}`);
                  } else {
                    await github.rest.actions.createRepositoryVariable({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      name: varName,
                      value: nextIndex.toString()
                    });
                    console.log(`Created variable ${varName} with value ${nextIndex}`);
                  }
                } catch (updateError) {
                  console.error(`Error managing variable: ${updateError.message}`);
                }
              } catch (error) {
                console.error(`Error assigning issue to ${assignee}: ${error.message}`);
              }
            }
