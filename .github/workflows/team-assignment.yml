name: Team Leader Round-Robin Assignment

on:
  issues:
    types: [opened, labeled]

permissions:
  issues: write

jobs:
  assign-team-leader:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.labels.*.name, 'community-team') || 
      contains(github.event.issue.labels.*.name, 'education-team') || 
      contains(github.event.issue.labels.*.name, 'marketing-team') || 
      contains(github.event.issue.labels.*.name, 'product-team')
    steps:
      - name: Check for variable existence
        id: check-vars
        run: |
          # Check if variables exist using GitHub CLI
          if gh variable list -R ${{ github.repository }} | grep -q "LAST_ASSIGNED_COMMUNITY_TEAM"; then
            echo "vars_exist=true" >> $GITHUB_OUTPUT
          else
            echo "vars_exist=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create variables if needed
        if: steps.check-vars.outputs.vars_exist == 'false'
        run: |
          gh variable set LAST_ASSIGNED_COMMUNITY_TEAM -R ${{ github.repository }} -b "0"
          gh variable set LAST_ASSIGNED_EDUCATION_TEAM -R ${{ github.repository }} -b "0"
          gh variable set LAST_ASSIGNED_MARKETING_TEAM -R ${{ github.repository }} -b "0" 
          gh variable set LAST_ASSIGNED_PRODUCT_TEAM -R ${{ github.repository }} -b "0"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Assign team leader
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            if (!issue) return;
            
            // Define team leaders
            const teamLeaders = {
              'community-team': ['EkkeGuembel', 'RCheesley'],
              'education-team': ['Favour-Chibueze', 'Fakela'],
              'marketing-team': ['SDoering', 'RCheesley'],
              'product-team': ['Jos0405', 'shinde-rahul']
            };
            
            // Get all label names
            const labelNames = issue.labels.map(label => label.name.toLowerCase());
            
            // Find first matching team
            const matchingTeam = Object.keys(teamLeaders).find(team => labelNames.includes(team));
            
            if (matchingTeam) {
              const leaders = teamLeaders[matchingTeam];
              const varName = `LAST_ASSIGNED_${matchingTeam.replace(/-/g, '_').toUpperCase()}`;
              
              // Get current index using GitHub CLI
              const { execSync } = require('child_process');
              let currentIndex = 0;
              try {
                const output = execSync(`gh variable get ${varName} -R ${process.env.GITHUB_REPOSITORY}`, { 
                  encoding: 'utf8',
                  env: {
                    ...process.env,
                    GITHUB_TOKEN: process.env.GITHUB_TOKEN
                  }
                });
                currentIndex = parseInt(output.trim()) || 0;
                console.log(`Current index for ${varName}: ${currentIndex}`);
              } catch (error) {
                console.log(`Could not get variable ${varName}, using default`);
              }
              
              // Calculate next index
              const nextIndex = (currentIndex + 1) % leaders.length;
              
              // Assign the leader
              const assignee = leaders[nextIndex];
              
              try {
                await github.rest.issues.addAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  assignees: [assignee]
                });
                console.log(`Assigned issue #${issue.number} to ${assignee} for team ${matchingTeam}`);
                
                // Update using GitHub CLI
                execSync(`gh variable set ${varName} -R ${process.env.GITHUB_REPOSITORY} -b "${nextIndex}"`, {
                  encoding: 'utf8',
                  env: {
                    ...process.env,
                    GITHUB_TOKEN: process.env.GITHUB_TOKEN
                  }
                });
                console.log(`Updated ${varName} to ${nextIndex}`);
              } catch (error) {
                console.error(`Error in assignment: ${error.message}`);
              }
            }
