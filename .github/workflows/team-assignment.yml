name: Team Leader Round-Robin Assignment

on:
  issues:
    types: [opened, labeled]

permissions:
  issues: write
  actions: write

jobs:
  assign-team-leader:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.labels.*.name, 'community-team') || 
      contains(github.event.issue.labels.*.name, 'education-team') || 
      contains(github.event.issue.labels.*.name, 'marketing-team') || 
      contains(github.event.issue.labels.*.name, 'product-team')
    steps:
      - name: Manually create variables if needed
        uses: actions/github-script@v6
        id: create-vars
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // This step just creates variables once if they don't exist
            try {
              await github.request('POST /repos/{owner}/{repo}/actions/variables', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'LAST_ASSIGNED_COMMUNITY_TEAM',
                value: '0'
              });
              console.log('Created LAST_ASSIGNED_COMMUNITY_TEAM');
            } catch (error) {
              console.log('LAST_ASSIGNED_COMMUNITY_TEAM variable may already exist');
            }
            
            try {
              await github.request('POST /repos/{owner}/{repo}/actions/variables', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'LAST_ASSIGNED_EDUCATION_TEAM',
                value: '0'
              });
              console.log('Created LAST_ASSIGNED_EDUCATION_TEAM');
            } catch (error) {
              console.log('LAST_ASSIGNED_EDUCATION_TEAM variable may already exist');
            }
            
            try {
              await github.request('POST /repos/{owner}/{repo}/actions/variables', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'LAST_ASSIGNED_MARKETING_TEAM',
                value: '0'
              });
              console.log('Created LAST_ASSIGNED_MARKETING_TEAM');
            } catch (error) {
              console.log('LAST_ASSIGNED_MARKETING_TEAM variable may already exist');
            }
            
            try {
              await github.request('POST /repos/{owner}/{repo}/actions/variables', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'LAST_ASSIGNED_PRODUCT_TEAM',
                value: '0'
              });
              console.log('Created LAST_ASSIGNED_PRODUCT_TEAM');
            } catch (error) {
              console.log('LAST_ASSIGNED_PRODUCT_TEAM variable may already exist');
            }
          
      - name: Assign team leader using variables
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            if (!issue) return;
            
            // Define team leaders
            const teamLeaders = {
              'community-team': ['EkkeGuembel', 'RCheesley'],
              'education-team': ['Favour-Chibueze', 'Fakela'],
              'marketing-team': ['SDoering', 'RCheesley'],
              'product-team': ['Jos0405', 'shinde-rahul']
            };
            
            // Get all label names
            const labelNames = issue.labels.map(label => label.name.toLowerCase());
            
            // Find first matching team
            const matchingTeam = Object.keys(teamLeaders).find(team => labelNames.includes(team));
            
            if (matchingTeam) {
              const leaders = teamLeaders[matchingTeam];
              const varName = `LAST_ASSIGNED_${matchingTeam.replace(/-/g, '_').toUpperCase()}`;
              
              // Get current variable value
              let currentIndex = 0;
              try {
                const response = await github.request('GET /repos/{owner}/{repo}/actions/variables/{name}', {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: varName
                });
                currentIndex = parseInt(response.data.value) || 0;
                console.log(`Current index for ${varName}: ${currentIndex}`);
              } catch (error) {
                console.log(`Could not get variable ${varName}: ${error.message}`);
                currentIndex = 0;
              }
              
              // Calculate next index
              const nextIndex = (currentIndex + 1) % leaders.length;
              
              // Assign the leader
              const assignee = leaders[nextIndex];
              
              try {
                await github.rest.issues.addAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  assignees: [assignee]
                });
                console.log(`Assigned issue #${issue.number} to ${assignee} for team ${matchingTeam}`);
                
                // Update the variable with new value
                try {
                  await github.request('PATCH /repos/{owner}/{repo}/actions/variables/{name}', {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: varName,
                    value: nextIndex.toString()
                  });
                  console.log(`Updated ${varName} to ${nextIndex}`);
                } catch (updateError) {
                  console.error(`Error updating variable: ${updateError.message}`);
                }
              } catch (error) {
                console.error(`Error assigning issue: ${error.message}`);
              }
            }
